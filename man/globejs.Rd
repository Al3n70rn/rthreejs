% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/globe.R
\name{globejs}
\alias{globejs}
\title{globejs Three.js globe widget}
\usage{
globejs(img, lat = 0, long = 0, color = "#00ffff", value = 40,
  bodycolor = "#0000ff", emissive = "#0000ff", lightcolor = "#aa7700",
  atmosphere = FALSE, bg = "black", height = NULL, width = NULL)
}
\arguments{
\item{img}{A character string representing a file path or URI of an image to plot on the globe surface.}

\item{lat}{Data point latitudes, must be of same length as \code{long} (negative values indicate south, positive north).}

\item{long}{Data point longitudes, must be of same length as \code{lat} (negative values indicate west, positive east).}

\item{color}{Either a single color value indicating the color of all data points, or a vector of values of the same length as \code{lat} indicating color of each point.}

\item{value}{Either a single value indicating the height of all data points, or a vector of values of the same length as \code{lat} indicating height of each point.}

\item{bodycolor}{The diffuse reflective color of the globe object.}

\item{emissive}{The emissive color of the globe object.}

\item{lightcolor}{The color of the ambient light in the scene.}

\item{atmosphere}{TRUE enables WebGL atmpsphere effect.}

\item{bg}{Plot background color.}

\item{height}{The container div height.}

\item{width}{The container div width.}
}
\description{
Three.js widget for mapping points and an image on a globe. The globe can
be rotated and and zoomed.
}
\note{
The \code{img} argument specifies the WebGL texture image to wrap on a
sphere. If you plan to plot points using \code{lat} and \code{lon}
the image should be a plate carr√©e (aka lat/long) equirectangular
map projection; see
\url{https://en.wikipedia.org/wiki/Equirectangular_projection} for
details..
Lat/long maps are commonly found for most planetary bodies in the
solar system, and are also easily generated directly in R
(see the references and examples below).
}
\examples{
## dontrun
# A shiny example:
library("shiny")
runApp(system.file("examples/globe",package="threejs"))

# A Stand-alone example:
library("threejs")
library("maps")
data(world.cities, package="maps")
cities <- world.cities[order(world.cities$pop,decreasing=TRUE)[1:1000],]
value  <- 100 * cities$pop / max(cities$pop)

# Set up a color map
col <- heat.colors(10)
col <- col[floor(length(col)*(100-value)/100) + 1]

# The name of a jpeg or PNG image file to wrap over the globe:
earth <- system.file("images/world.jpg",  package="threejs")
globejs(img=earth, lat=cities$lat, long=cities$long, value=value,
        color=col, atmosphere=TRUE)

# Plot the data on the moon:
moon <- system.file("images/moon.jpg", package="threejs")
globejs(img=moon, bodycolor="#555555", emissive="#444444",
         lightcolor="#555555", lat=cities$lat, long=cities$long,
         value=value, color=col)

# Plot a high-resolution NASA MODIS globe (it can take a while to download
# the image!)
globejs("http://eoimages.gsfc.nasa.gov/images/imagerecords/73000/73909/world.topo.bathy.200412.3x5400x2700.jpg")

# Using global plots from the maptools, rworldmap, and sp packages.

# Instead of using ready-made images of the earth, we can employ some
# incredibly capable R spatial imaging packages to produce globe images
# dynamically. With a little extra effort you can build globes with total
# control over how they are plotted.

#------------------------------
# Using the R maptools package
#------------------------------
library("maptools")
library("threejs")
data(wrld_simpl)

bgcolor <- "#000025"
earth <- tempfile(fileext=".jpg")


# NOTE: Use antialiasing to smooth border boundary lines. But! Set the jpeg
# background color to the globe background color to avoid a visible aliasing
# effect at the the plot edges.

jpeg(earth,width=2048,height=1024,quality=100,bg=bgcolor,antialias="default")
par(mar = c(0,0,0,0), pin = c(4,2), pty = "m",  xaxs = "i",
    xaxt = "n",       xpd = FALSE,  yaxs = "i", bty = "n", yaxt = "n")
plot(wrld_simpl, col="black", bg=bgcolor, border="cyan", ann=FALSE,
     setParUsrBB=TRUE)
dev.off()
globejs(earth)

See http://bwlewis.github.io/rthreejs for additional examples.
}
\references{
The three.js project \url{http://threejs.org}.
(The corresponding three.js javascript file is in
\code{ system.file("htmlwidgets/globejs",package="threejs")}.)

An excellent overview of available map coordinate reference systems (PDF):
\url{https://www.nceas.ucsb.edu/~frazier/RSpatialGuides/OverviewCoordinateReferenceSystems.pdf}

Includes ideas and images from the dat.globe Javascript WebGL Globe Toolkit
\url{http://dataarts.github.com/dat.globe},
Copyright 2011 Data Arts Team, Google Creative Lab
Licensed under the Apache License, Version 2.0
\url{http://www.apache.org/licenses/LICENSE-2.0}

NASA Blue Marble/MODIS Earth images \url{visibleearth.nasa.gov}

Moon image: \url{http://maps.jpl.nasa.gov/textures/ear1ccc2.jpg}.

Mars image: \url{http://pdsmaps.wr.usgs.gov/PDS/public/explorer/html/marsadvc.htm}.

Jupiter image: \url{http://maps.jpl.nasa.gov/textures/jup0vtt2.jpg}.
}

