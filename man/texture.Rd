% Generated by roxygen2 (4.0.2): do not edit by hand
\name{texture}
\alias{texture}
\title{texture Convert a matrix or raster image to a three.js texture}
\usage{
texture(data, alpha = 1)
}
\arguments{
\item{data}{A data matrix representing a grayscale image or a
raster image object with optional alpha channel.}

\item{alpha}{The default alpha level in [0,1] to use if not
specified in the raster image format.}
}
\value{
JSON-formatted string suitable for use as a three.js
texture.
}
\description{
Convert matrix or raster image image representations in R into
JSON-formatted arrays suitable for use as three.js DataTexture
RGBA textures.
}
\note{
Due to browser
"same origin policy" security restrictions, loading textures
from a file system in three.js may lead to a security exception,
see
\url{https://github.com/mrdoob/three.js/wiki/How-to-run-things-locally}.
References to file locations work in Shiny apps, but not in stand-alone
examples. The \code{texture} function facilitates transfer of image
texture data from R using the three.js \code{DataTexture} function.
Binary image data are encoded and inserted into three.js without using
files.

Note that this method limits each image dimension to a power of two
(see \url{https://github.com/mrdoob/three.js/issues/1277}). Also note
that this is not that efficient for large images. Consider using shiny
and file references in that case.
}
\examples{
## dontrun
library("png")
img <- readPNG(system.file("img", "Rlogo.png", package="png"))
texture(img)
}
\references{
The threejs project \url{http://threejs.org}.
\url{https://github.com/mrdoob/three.js/wiki/How-to-run-things-locally}.
}

