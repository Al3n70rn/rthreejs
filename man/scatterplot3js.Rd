% Generated by roxygen2 (4.0.2): do not edit by hand
\name{scatterplot3js}
\alias{scatterplot3js}
\title{scatterplot3js Three.js 3D scatterplot widget.}
\usage{
scatterplot3js(x, y, z, height = NULL, width = NULL, axis = TRUE,
  num.ticks = c(6, 6, 6), color = "steelblue", stroke = "black",
  size = 1, flip.y = TRUE, grid = TRUE, renderer = c("auto", "canvas",
  "webgl"), pch)
}
\arguments{
\item{x}{Either a vector of x-coordinate values or a  three-column
data matrix with three columns corresponding to the x,y,z
coordinate axes. Column labels, if present, are used as axis labels.}

\item{y}{(Optional) vector of y-coordinate values, not required if
\code{x} is a matrix.}

\item{z}{(Optional) vector of z-coordinate values, not required if
\code{x} is a matrix.}

\item{height}{The container div height.}

\item{width}{The container div width.}

\item{num.ticks}{A three-element vector with the suggested number of
ticks to display per axis. Set to NULL to not display ticks. The number
of ticks may be adjusted by the program.}

\item{color}{Either a single hex or named color name, or
a vector of color names of length \code{nrow(x)} (see note below).}

\item{stroke}{A single color stroke value (surrounding each point). Set to
null to omit stroke. (Only available in the CanvasRenderer.)}

\item{size}{The plot point radius, either as a single number or a
vector of sizes of length \code{nrow(x)}. Note that the Canvas renderer
supports a vector of sizes but the WebGL renderer only supports one
overall size right now.}

\item{flip.y}{Reverse the direction of the y-axis (the default value of
TRUE produces plots similar to those rendered by the R
\code{scatterplot3d} package).}

\item{grid}{Set FALSE to disable display of a grid.}

\item{renderer}{Select from available plot rendering techniques of
'auto', 'canvas', or 'webgl'.}

\item{pch}{An optional data texture image prepared by the \code{texture}
  function used by the WebGL renderer to draw the points--only available
  in the WebGL renderer.}
}
\description{
A 3D scatterplot widget using d3.js and three.js.
}
\note{
Use the \code{renderer} option to manually select from the available
rendering options. The default value of \code{'auto'} chooses WebGL
or Canvas rendering automatically based
on the available output device. The two renderers are slightly different
and have different available options (see above).

The three.js color specifications used in this function accept RGB colors
specified by color names or hex color value like \code{"#ff22aa"}. Most
of R's color palette functions return RGBA hex color value strings, and
the extra alpha specification is not compatible with the three.js color
specification used here (by the \code{THREE.Color} javascript function).
When using R color palette hex values, it is necessary to truncate the
last two alpha characters, for example with the \code{substr} function as
illustrated in the example below.
}
\examples{
## dontrun
# A stand-alone example
set.seed(1)
x <- matrix(rnorm(100*3),ncol=3)
scatterplot3js(x, color=substr(heat.colors(100), 1, 7))

# Example 1 from the scatterplot3d package (cf.)
  z <- seq(-10, 10, 0.01)
  x <- cos(z)
  y <- sin(z)
  scatterplot3js(x,y,z)

# A shiny example
library("shiny")
runApp(system.file("examples/scatterplot",package="threejs"))
}
\references{
The three.js project \url{http://threejs.org}.
}
\seealso{
scatterplot3d, rgl
}

